---
- name: Install cert-manager into Kubernetes
  block:
    - name: Check to see if cert-manager has already been deployed
      shell: "helm status cert-manager | grep -q 'STATUS:\ DEPLOYED'"
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: helm_status
      changed_when: false
      failed_when: false
      become: yes

    # This command is idempotent, so we don't need to check if it exists
    # beforehand
    - name: Add the jetstack helm repo
      command: 'helm repo add jetstack https://charts.jetstack.io'
      become: yes

    - name: Helm repo update
      command: helm repo update
      become: yes

    - name: Create tmpdir
      tempfile:
        state: directory
      changed_when: false
      register: tmpdir

    - name: Fetch cert-manager crds
      get_url:
        url: "https://raw.githubusercontent.com/jetstack/cert-manager/release-{{ release_version }}/deploy/manifests/00-crds.yaml"
        dest: "{{ tmpdir.path }}/00-crds.yaml"

    - name: Install cert-manager crds
      command: 'kubectl apply -f "{{ tmpdir.path }}/00-crds.yaml"'
      environment:
        KUBECONFIG: '{{ kubeconfig }}'
      become: yes

    - name: Install cert-manager using helm
      command: 'helm upgrade --install {% if chart_version != "latest" %}--version {{ chart_version }}{% endif %} --namespace=kube-system cert-manager jetstack/cert-manager'
      environment:
        KUBECONFIG: '{{ kubeconfig }}'
      become: yes

    - name: "\"Install\" template for staging issuer into temp location"
      template:
        src: issuer-staging.yml.j2
        dest: "{{ tmpdir.path }}/issuer-staging.yml"
      changed_when: False

    - name: Get initial staging issuer definition, if applicable
      shell: "kubectl --kubeconfig={{ kubeconfig }} get {{ issuer_type | lower }} letsencrypt-staging"
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: staging_issuer_cmd
      failed_when: False
      changed_when: False
      become: yes

    - name: Use kubectl to install the staging issuer
      shell: "kubectl --kubeconfig={{ kubeconfig }} apply -f {{ tmpdir.path }}/issuer-staging.yml"
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: apply_result
      changed_when: False
      become: yes

    - name: Check to see if issuer config has changed
      shell: "kubectl --kubeconfig={{ kubeconfig }} get {{ issuer_type | lower }} letsencrypt-staging"
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: staging_issuer_new_cmd
      changed_when: (staging_issuer_cmd.stdout != staging_issuer_new_cmd.stdout)
      become: yes

    - name: Test for letsencrypt staging issuer
      shell: "kubectl get -f {{ tmpdir.path }}/issuer-staging.yml"
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      changed_when: False
      become: yes

    - name: "\"Install\" template for prod issuer into temp location"
      template:
        src: issuer-prod.yml.j2
        dest: "{{ tmpdir.path }}/issuer-prod.yml"
      changed_when: False

    - name: Get initial prod issuer definition, if applicable
      shell: "kubectl --kubeconfig={{ kubeconfig }} get {{ issuer_type | lower }} letsencrypt"
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: prod_issuer_cmd
      failed_when: False
      changed_when: False
      become: yes

    - name: Use kubectl to install the prod issuer
      shell: "kubectl --kubeconfig={{ kubeconfig }} apply -f {{ tmpdir.path }}/issuer-prod.yml"
      failed_when: False
      changed_when: False
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      become: yes

    - name: Check to see if issuer config has changed
      shell: "kubectl --kubeconfig={{ kubeconfig }} get {{ issuer_type | lower }} letsencrypt"
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: prod_issuer_new_cmd
      changed_when: (prod_issuer_cmd.stdout != prod_issuer_new_cmd.stdout)
      become: yes
  always:
    - name: Remove tmpdir
      file:
        path: "{{ tmpdir.path }}"
        state: absent
      changed_when: false
      become: yes
