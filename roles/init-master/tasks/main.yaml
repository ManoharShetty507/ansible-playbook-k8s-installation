
- name: E- name: register kubelet version
  shell: /usr/bin/kubelet --version
  register: r_kubelet_version
  changed_when: falsenabling kubelet
  service:
    name: kubelet
    state: started
    enabled: yes
    
- name: register fact
  set_fact:
    kubelet_version:  "{{r_kubelet_version.stdout.split(' ')[1]}}"
    
- name: copy kubeinit template
  template:
    src: config.yaml.j2
    dest: /etc/kubernetes/config.yaml    
    
- name: Run task on master 1
  block:
    - name: stat file if kubeadm init should run
      stat:
        path: /etc/kubernetes/bootstrap.log
      register: r_bootstrap     
      changed_when: false
- name: register join token
  shell: grep -A1 "^kubeadm join" /etc/kubernetes/bootstrap.log
  register: r_join_token_command
  changed_when: false
  ignore_errors: true
- name: debug
    debug:
      var: r_join_token_command
      
- name: fail the play when bootstrap fail
  fail:
    msg: "kubeinit fail on {{inventory_hostname}}, rm 'etc/kubernetes/bootstrap.log', ' rerun 'kubadm init --config=/etc/kubernetes/config.yaml> /etc/kubernetes/bootstrap.log' manually to debug"
  when: r_join_token_command.rc > 0 
  
- name: Check if kubeadm config images are pulled
  command: "kubeadm config images list"
  register: kubeadm_images
  changed_when: false # Mark this task as not changed if the command output is as expected

- name: Pull kubeadm config images if not already pulled
  command: "kubeadm config images pull"
  when: kubeadm_images.stdout.find('image1') == -1

- name: Check if Kubernetes is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_initialized

- name: Initialize Kubernetes master node
  shell: kubeadm init --control-plane-endpoint "LOAD_BALANCER_IP:LOAD_BALANCER_PORT" --upload-certs 
  when: not k8s_initialized.stat.exists
   when: r_bootstrap.stat.exists == false
- name: register join token
  shell: grep -A1 "^kubeadm join" /etc/kubernetes/bootstrap.log
  register: r_join_token_command
  changed_when: false
  ignore_errors: true
- name: debug
   debug:
    var: r_join_token_command
- name: Check if /etc/kubernetes directory exists
  stat:
    path: /etc/kubernetes
  register: kubernetes_dir

- name: Print status message based on directory existence
  debug:
    msg: "/etc/kubernetes folder {{ 'exists' if kubernetes_dir.stat.exists else 'does not exist' }}."

- name: Check if Kubernetes is already initialized (kube-apiserver)
  stat:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
  register: k8s_apiserver_initialized

- name: Create .kube folder for ansible-user
  become: yes
  file:
    path: "/home/ansible-user/.kube"
    state: directory
    owner: ansible-user
    group: ansible-user
    mode: "0755"
  when: not k8s_initialized.stat.exists

- name: Copy admin.conf to .kube folder for ansible-user
  become: yes
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/ansible-user/.kube/config
    owner: ansible-user
    group: ansible-user
    mode: "0644"
    remote_src: yes
  when: not k8s_initialized.stat.exists

- name: Create .kube folder for root
  file:
    path: "/root/.kube"
    state: directory
    owner: "root"
    mode: "0755"

- name: Copy admin.conf to .kube folder for root
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/root/.kube/config"
    owner: "root"
    mode: "0644"
    remote_src: yes

- name: Copy admin.conf
  become: yes
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /tmp/admin.conf
    remote_src: yes

- name: Change permissions of admin.conf to ansible-user readable
  file:
    path: /etc/kubernetes/admin.conf
    owner: ansible-user
    group: ansible-user
    mode: "0644"

