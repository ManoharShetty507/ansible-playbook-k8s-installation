---
- name: Check if Kubernetes is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_initialized

- name: Pull the correct pause image
  command: ctr --namespace k8s.io image pull registry.k8s.io/pause:3.9
  become: true

- name: Ensure /etc/kubernetes directory exists
  file:
    path: /etc/kubernetes
    state: directory
    mode: '0755'

- name: Ensure required cgroups are enabled
  hosts: master
  become: true
  tasks:
    - name: Check if cgroup_enable=cpuset is present in /proc/cmdline
      command: grep -qw 'cgroup_enable=cpuset' /proc/cmdline
      register: cgroup_check
      ignore_errors: true

- name: Enable required cgroups in /boot/cmdline.txt
  lineinfile:
    path: /boot/cmdline.txt
    line: 'cgroup_enable=cpuset, memory'
    state: present
  when: cgroup_check.rc != 0
  notify: reboot_system

  handlers:
    - name: reboot_system
      reboot:
        reboot_timeout: 600

  
- name: Copy kubeadm configuration
  template:
    src: roles/first-master/templates/config.yaml.j2
    dest: /etc/kubernetes/kubeadm-config.yaml
    mode: '0644'

- name: Check if kubeadm config file exists
  stat:
    path: /etc/kubernetes/kubeadm-config.yaml
  register: kubeadm_config

- name: Debug kubeadm config existence
  debug:
    msg: "Kubeadm config file exists: {{ kubeadm_config.stat.exists }}"

- name: Initialize the Kubernetes master
  command: kubeadm init --config /etc/kubernetes/kubeadm-config.yaml --ignore-preflight-errors=NumCPU,Mem
  when: kubeadm_config.stat.exists
  register: kubeadm_init
  failed_when: kubeadm_init.rc != 0
  ignore_errors: yes

- name: Check if /etc/kubernetes directory exists
  stat:
    path: /etc/kubernetes
  register: kubernetes_dir

- name: Print status message based on directory existence
  debug:
    msg: "/etc/kubernetes folder {{ 'exists' if kubernetes_dir.stat.exists else 'does not exist' }}."

- name: Check if Kubernetes is already initialized (kube-apiserver)
  stat:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
  register: k8s_apiserver_initialized
  
- name: Create .kube folder for ansible-user
  become: yes
  file:
    path: "/home/ansible-user/.kube"
    state: directory
    owner: ansible-user
    group: ansible-user
    mode: "0755"
  when: not k8s_initialized.stat.exists

- name: Copy admin.conf to .kube folder for ansible-user
  become: yes
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/ansible-user/.kube/config
    owner: ansible-user
    group: ansible-user
    mode: "0644"
    remote_src: yes
  when: not k8s_initialized.stat.exists

- name: Create .kube folder for root
  file:
    path: "/root/.kube"
    state: directory
    owner: "root"
    mode: "0755"

- name: Copy admin.conf to .kube folder for root
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/root/.kube/config"
    owner: "root"
    mode: "0644"
    remote_src: yes

- name: Copy admin.conf
  become: yes
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /tmp/admin.conf
    remote_src: yes

- name: Change permissions of admin.conf to ansible-user readable
  file:
    path: /etc/kubernetes/admin.conf
    owner: ansible-user
    group: ansible-user
    mode: "0644"
- name: "Installing iproute-tc"
  package:
    name: iproute-tc
    state: present
- name: "Enabling IPtables Bridge Firewall Rule"
  command: "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"
